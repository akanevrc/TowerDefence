using System;
using System.Collections.Generic;
using System.IO;
using System.Reflection;
using System.Text;
using UnityEditor;

namespace akanevrc.TowerDefence.Editor
{
    public class SourceGenerationProcessor
    {
        const string GeneratedSourceFolder = "Assets/akanevrc/TowerDefence/Runtime/SourceGenerators/GeneratedSources";

        [InitializeOnLoadMethod]
        private static void Initialize()
        {
            GenerateAllFiles();
        }

        private static void GenerateAllFiles()
        {
            var pathAndCode = new List<(string path, string code)>();

            foreach (var assembly in AppDomain.CurrentDomain.GetAssemblies())
            {
                foreach (var type in assembly.GetTypes())
                {
                    if (type.HasAttribute<SourceGeneratorAttribute>())
                    {
                        pathAndCode.Add(GenerateSource(type));
                    }
                }
            }

            foreach (var (path, code) in pathAndCode)
            {
                WriteFile(path, code);
            }

            AssetDatabase.Refresh();
        }

        private static (string path, string code) GenerateSource(Type generator)
        {
            var fileName = generator.GetCustomAttribute<SourceGeneratorAttribute>().GeneratedFileName;

            if (string.IsNullOrEmpty(fileName))
            {
                throw new InvalidOperationException($"SourceGenerator attribute of {generator} does not have a GeneratedFileName.");
            }

            var generate = generator.GetMethod("Generate");

            if (generate == null || !generate.IsStatic || generate.ReturnType != typeof(string) || generate.GetParameters().Length != 0)
            {
                throw new InvalidOperationException($"{generator} does not have a `static string Generate()` method.");
            }

            var path = $"{GeneratedSourceFolder}/{fileName}";
            var code = (string)generate.Invoke(null, null);
            code = $"// <auto-generated/>{Environment.NewLine}{code}";

            return (path, code);
        }

        private static void WriteFile(string path, string code)
        {
            try
            {
                var oldCode = File.ReadAllText(path, Encoding.UTF8);
                if (oldCode == code) return;
            }
            catch (IOException) {}

            File.WriteAllText(path, code, Encoding.UTF8);
            AssetDatabase.ImportAsset(path);
        }
    }
}
